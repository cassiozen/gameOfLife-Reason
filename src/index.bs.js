// Generated by BUCKLESCRIPT VERSION 2.0.0, PLEASE EDIT WITH CARE
'use strict';

import * as List             from "bs-platform/lib/es6/list.js";
import * as Curry            from "bs-platform/lib/es6/curry.js";
import * as Random           from "bs-platform/lib/es6/random.js";
import * as Caml_array       from "bs-platform/lib/es6/caml_array.js";
import * as Caml_format      from "bs-platform/lib/es6/caml_format.js";
import * as Js_primitive     from "bs-platform/lib/es6/js_primitive.js";
import * as Board$ReasonLife from "./Board.bs.js";

var random = Random.self_init(/* () */0);

function map(f, param) {
  if (param) {
    return /* Some */[Curry._1(f, param[0])];
  } else {
    return /* None */0;
  }
}

var cells = [/* [] */0];

function createTable(param) {
  var columns = param[1];
  var table = document.createElement("table");
  table.className = "board";
  for(var r = 0 ,r_finish = param[0] - 1 | 0; r <= r_finish; ++r){
    var tr = document.createElement("tr");
    for(var c = 0 ,c_finish = columns - 1 | 0; c <= c_finish; ++c){
      var td = document.createElement("td");
      cells[0] = /* :: */[
        td,
        cells[0]
      ];
      td.id = "" + (String(r) + ("-" + (String(c) + "")));
      tr.appendChild(td);
    }
    table.appendChild(tr);
  }
  return table;
}

var size = /* tuple */[
  40,
  60
];

var presentBoard = [Board$ReasonLife.make(size)];

var futureBoard = [Board$ReasonLife.make(size)];

var table = createTable(size);

var interval = [/* None */0];

var root = map((function (param) {
        param.appendChild(table);
        return /* () */0;
      }), Js_primitive.null_to_opt(document.getElementById("root")));

function paint() {
  return List.iter((function (td) {
                var id = td.id;
                var coords = id.split("-");
                var cell = Board$ReasonLife.getCell(/* tuple */[
                      Caml_format.caml_int_of_string(Caml_array.caml_array_get(coords, 1)),
                      Caml_format.caml_int_of_string(Caml_array.caml_array_get(coords, 0))
                    ], presentBoard[0]);
                console.log(cell);
                if (cell) {
                  td.className = "alive";
                  return /* () */0;
                } else {
                  td.className = "dead";
                  return /* () */0;
                }
              }), cells[0]);
}

function step(rules) {
  if (rules) {
    Board$ReasonLife.tick(presentBoard[0], futureBoard[0], /* Some */[rules[0]], /* () */0);
  } else {
    Board$ReasonLife.tick(presentBoard[0], futureBoard[0], /* None */0, /* () */0);
  }
  var temp = presentBoard[0];
  presentBoard[0] = futureBoard[0];
  futureBoard[0] = temp;
  return paint(/* () */0);
}

function randomizeBoard() {
  return step(/* Some */[(function (_, _$1) {
                  return Random.$$int(2);
                })]);
}

function play() {
  var match = interval[0];
  if (match) {
    clearInterval(match[0]);
    interval[0] = /* None */0;
    return /* () */0;
  } else {
    interval[0] = /* Some */[setInterval((function () {
              return step(/* None */0);
            }), 100)];
    return /* () */0;
  }
}

map((function (param) {
        param.addEventListener("click", randomizeBoard);
        return /* () */0;
      }), Js_primitive.null_to_opt(document.getElementById("reset_btn")));

map((function (param) {
        param.addEventListener("click", play);
        return /* () */0;
      }), Js_primitive.null_to_opt(document.getElementById("play_btn")));

var WebApi = 0;

export {
  WebApi         ,
  random         ,
  map            ,
  cells          ,
  createTable    ,
  size           ,
  presentBoard   ,
  futureBoard    ,
  table          ,
  interval       ,
  root           ,
  paint          ,
  step           ,
  randomizeBoard ,
  play           ,
  
}
/* random Not a pure module */
